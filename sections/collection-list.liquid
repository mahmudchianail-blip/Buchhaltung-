<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Shopify Collection Showcase</title>
    <!-- React and Babel for running JSX in the browser -->
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

    <style>
        /* General Body Styles */
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
            background-color: #ffffff;
            margin: 0;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        /* Helper to hide scrollbars */
        .scrollbar-hide {
            -ms-overflow-style: none; /* IE and Edge */
            scrollbar-width: none; /* Firefox */
        }
        .scrollbar-hide::-webkit-scrollbar {
            display: none; /* Chrome, Safari and Opera */
        }
        
        /* Section Styles */
        .collection-section {
            background-color: #fff;
            padding: 3rem 0; /* 48px */
        }
        @media (min-width: 640px) {
            .collection-section {
                padding: 4rem 0; /* 64px */
            }
        }
        @media (min-width: 1024px) {
            .collection-section {
                padding: 5rem 0; /* 80px */
            }
        }

        /* Container for content */
        .container {
            max-width: 80rem; /* 1280px */
            margin-left: auto;
            margin-right: auto;
            padding-left: 1rem; /* 16px */
            padding-right: 1rem; /* 16px */
        }
        @media (min-width: 640px) {
            .container {
                padding-left: 1.5rem; /* 24px */
                padding-right: 1.5rem; /* 24px */
            }
        }
        @media (min-width: 1024px) {
            .container {
                padding-left: 2rem; /* 32px */
                padding-right: 2rem; /* 32px */
            }
        }

        /* Title and Header */
        .section-header {
            margin-bottom: 2rem; /* 32px */
        }
        @media (min-width: 640px) {
            .section-header {
                display: flex;
                align-items: center;
                justify-content: space-between;
            }
        }

        .section-title {
            font-size: 1.875rem; /* 30px */
            font-weight: 700;
            color: #111827;
            letter-spacing: -0.025em;
            text-align: center;
        }
        @media (min-width: 640px) {
            .section-title {
                text-align: left;
            }
        }
        @media (min-width: 1024px) {
            .section-title {
                font-size: 2.25rem; /* 36px */
            }
        }
        
        /* Collection List Grid / Slider */
        .collection-list {
            list-style: none;
            padding: 0;
            margin: 0;
            display: grid;
            gap: 1.5rem; /* 24px */
            overflow-x: auto;
            scroll-snap-type: x mandatory;
            scroll-behavior: smooth;
            grid-auto-flow: column;
            grid-auto-columns: calc(100% - 2rem); /* Mobile view: 1 card visible */
        }
        
        .collection-list-item {
             scroll-snap-align: start;
        }

        @media (min-width: 640px) {
            .collection-list {
                grid-auto-flow: column;
                grid-auto-columns: calc(50% - 0.75rem); /* Tablet: 2 cards visible */
            }
        }

        @media (min-width: 1024px) {
            .collection-list {
                grid-template-columns: repeat(3, 1fr);
                overflow-x: visible; /* Disable scrolling on desktop */
                gap: 2rem; /* 32px */
            }
        }

        /* Collection Card Styles (from your example) */
        .collection-card {
            display: flex;
            flex-direction: column;
            width: 100%;
            height: 100%;
            border-radius: 16px;
            overflow: hidden;
            background: #fff;
            border: 1px solid rgba(0,0,0,.08);
            box-shadow: 0 14px 36px rgba(0,0,0,.10);
            transition: transform .22s ease, box-shadow .22s ease, border-color .22s ease;
        }
        .collection-card:hover {
            transform: translateY(-5px);
            border-color: rgba(0,0,0,.14);
            box-shadow: 0 20px 52px rgba(0,0,0,.14);
        }

        .card-media {
            aspect-ratio: 1 / 1;
            width: 100%;
            overflow: hidden;
        }
        @media (max-width: 749px){ 
            .card-media { 
                aspect-ratio: 4 / 3; 
            } 
        }

        .card-media img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            object-position: center;
            transform: scale(1.02);
            transition: transform .5s cubic-bezier(.22,.61,.36,1);
        }
        .collection-card:hover .card-media img {
            transform: scale(1.06);
        }
        
        .card-info {
            background:#fff; 
            padding:16px 18px 18px 18px; 
            border-top:1px solid rgba(0,0,0,.06);
        }
        .card-heading {
            margin:0; 
            color:#151515; 
            font-weight:700;
            font-size: clamp(1rem, 1.2vw, 1.25rem); 
            line-height:1.2;
        }
        .card-link {
            position: relative;
            display:inline-flex; 
            align-items:center; 
            gap:.5rem;
            text-decoration:none; 
            white-space:nowrap;
            color: inherit;
        }
        .card-link::after {
            content:"";
            position: absolute;
            top: 0;
            right: -18px; /* Extend clickable area */
            bottom: 0;
            left: -18px;
        }
        .card-link-arrow {
            font-weight:700; 
            transform:translateX(0); 
            opacity:.85;
            transition: transform .18s ease, opacity .18s ease;
        }
        .collection-card:hover .card-link-arrow {
             transform: translateX(4px);
        }

        /* Mobile Slider Controls */
        .slider-controls {
            margin-top: 2rem; /* 32px */
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 1rem; /* 16px */
        }
        @media (min-width: 1024px) {
            .slider-controls {
                display: none;
            }
        }
        .slider-button {
            width: 44px;
            height: 44px;
            border-radius: 9999px;
            background: #fff;
            box-shadow: 0 8px 18px rgba(0,0,0,.10);
            border: 1px solid rgba(0,0,0,.12);
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: transform .15s ease, background .2s ease, border-color .2s ease;
        }
        .slider-button:hover {
            transform: translateY(-2px);
            background-color: #f3f4f6;
        }
        .slider-button:active {
             transform: scale(0.95);
        }
        .slider-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
            background-color: #fff;
        }
        .slider-button svg {
            width: 20px;
            height: 20px;
            color: #374151;
        }
        .slider-button.next svg {
            transform: rotate(180deg);
        }
        .slider-counter {
            font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
            font-size: 0.875rem; /* 14px */
            color: #111827;
        }
        .slider-counter .current {
            font-weight: 700;
        }
        .slider-counter .divider {
            color: #9ca3af;
            margin: 0 0.25rem;
        }

    </style>
</head>
<body>

    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect, useRef } = React;

        // --- MOCK DATA ---
        const mockCollections = [
          {
            id: '1',
            title: 'Summer Apparel',
            imageUrl: 'https://picsum.photos/seed/summer/800/800',
            url: '#',
          },
          {
            id: '2',
            title: 'Winter Gear',
            imageUrl: 'https://picsum.photos/seed/winter/800/800',
            url: '#',
          },
          {
            id: '3',
            title: 'Autumn Collection',
            imageUrl: 'https://picsum.photos/seed/autumn/800/800',
            url: '#',
          }
        ];

        // --- ICON COMPONENT ---
        const CaretIcon = (props) => (
          <svg
            width="8"
            height="12"
            viewBox="0 0 8 12"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            aria-hidden="true"
            {...props}
          >
            <path
              d="M6.5 1.5L1.5 6L6.5 10.5"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            />
          </svg>
        );

        // --- COLLECTION CARD COMPONENT ---
        const CollectionCard = ({ collection }) => {
          return (
            <div className="collection-card">
              <div className="card-media">
                <img
                  src={collection.imageUrl}
                  alt={`Image for ${collection.title} collection`}
                />
              </div>
              <div className="card-info">
                <h3 className="card-heading">
                  <a href={collection.url} className="card-link">
                    <span>{collection.title}</span>
                    <span className="card-link-arrow">&rarr;</span>
                  </a>
                </h3>
              </div>
            </div>
          );
        };

        // --- COLLECTION LIST COMPONENT ---
        const CollectionList = ({ title, collections }) => {
          const scrollContainerRef = useRef(null);
          const [isScrolled, setIsScrolled] = useState(false);
          const [isEnd, setIsEnd] = useState(collections.length <= 1);
          const [currentIndex, setCurrentIndex] = useState(1);

          const checkScrollPosition = () => {
            const el = scrollContainerRef.current;
            if (el) {
              const atStart = el.scrollLeft === 0;
              const atEnd = Math.ceil(el.scrollWidth - el.scrollLeft) <= el.clientWidth + 1;
              setIsScrolled(!atStart);
              setIsEnd(atEnd);
              
              const itemWidth = el.scrollWidth / collections.length;
              const currentVisibleIndex = Math.round(el.scrollLeft / itemWidth);
              setCurrentIndex(currentVisibleIndex + 1);
            }
          };

          useEffect(() => {
            const el = scrollContainerRef.current;
            if (el) {
              el.addEventListener('scroll', checkScrollPosition, { passive: true });
              checkScrollPosition();
            }
            
            window.addEventListener('resize', checkScrollPosition);
            return () => {
              if (el) {
                el.removeEventListener('scroll', checkScrollPosition);
              }
              window.removeEventListener('resize', checkScrollPosition);
            };
          }, [collections.length]);

          const scroll = (direction) => {
            const el = scrollContainerRef.current;
            if (el) {
              const scrollAmount = el.clientWidth;
              el.scrollBy({
                left: direction === 'next' ? scrollAmount : -scrollAmount,
                behavior: 'smooth',
              });
            }
          };

          return (
            <section className="collection-section">
              <div className="container">
                <div className="section-header">
                  <h2 className="section-title">{title}</h2>
                </div>

                <div className="relative">
                  <ul ref={scrollContainerRef} className="collection-list scrollbar-hide">
                    {collections.map((collection) => (
                      <li key={collection.id} className="collection-list-item">
                        <CollectionCard collection={collection} />
                      </li>
                    ))}
                  </ul>
                </div>
                
                {collections.length > 1 && (
                  <div className="slider-controls">
                    <button
                      onClick={() => scroll('prev')}
                      aria-label="Previous collection"
                      disabled={!isScrolled}
                      className="slider-button prev"
                    >
                      <CaretIcon />
                    </button>
                    <div className="slider-counter">
                      <span className="current">{currentIndex}</span>
                      <span className="divider">/</span>
                      <span>{collections.length}</span>
                    </div>
                    <button
                      onClick={() => scroll('next')}
                      aria-label="Next collection"
                      disabled={isEnd}
                      className="slider-button next"
                    >
                      <CaretIcon />
                    </button>
                  </div>
                )}
              </div>
            </section>
          );
        };

        // --- APP COMPONENT ---
        const App = () => {
          return (
            <main>
              <CollectionList 
                title="Featured Collections"
                collections={mockCollections} 
              />
            </main>
          );
        };

        // --- RENDER THE APP ---
        const rootElement = document.getElementById('root');
        const root = ReactDOM.createRoot(rootElement);
        root.render(<App />);

    </script>
</body>
</html>
