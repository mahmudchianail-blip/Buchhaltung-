<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Optispar E-Commerce Page</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
      /* --- New Loader Animations --- */
      @keyframes form-from-stardust {
        0% {
          opacity: 0;
          transform: scale(1.5) translateY(-20px);
          filter: blur(10px) brightness(2);
        }
        50% {
          opacity: 0.8;
          filter: blur(2px) brightness(1.5);
        }
        100% {
          opacity: 1;
          transform: scale(1) translateY(0);
          filter: blur(0) brightness(1);
        }
      }

      @keyframes subtle-glow {
        0%, 100% {
          text-shadow: 0 0 8px rgba(255, 255, 255, 0.2), 0 0 20px rgba(192, 132, 252, 0.3);
        }
        50% {
          text-shadow: 0 0 12px rgba(255, 255, 255, 0.3), 0 0 30px rgba(192, 132, 252, 0.5);
        }
      }

      @keyframes fade-out {
        from { opacity: 1; }
        to { opacity: 0; }
      }

      /* --- Hero Text Reveal Animation --- */
      @keyframes fade-in-up-scale {
        0% {
          opacity: 0;
          transform: translateY(20px) scale(0.9);
        }
        100% {
          opacity: 1;
          transform: translateY(0) scale(1);
        }
      }
      
      /* --- New "Settle" Animation for Brand Name --- */
      @keyframes settle-in-place {
        0% {
          opacity: 0;
          transform: translateY(-30px) scale(1.15);
          filter: blur(8px);
        }
        100% {
          opacity: 1;
          transform: translateY(0) scale(1);
          filter: blur(0);
        }
      }

      .animate-fade-in-up-scale {
        animation: fade-in-up-scale 0.6s cubic-bezier(0.23, 1, 0.32, 1) forwards;
      }


      /* Custom Animations for Header Icons */
      @keyframes jiggle {
        0%, 100% { transform: translateY(0) rotate(0); }
        50% { transform: translateY(-1px) rotate(-2deg); }
      }
      @keyframes wheel-roll {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
      @keyframes search-tilt {
        0%, 100% { transform: rotate(0); }
        50% { transform: rotate(-15deg); }
      }
      @keyframes user-bob {
        0%, 100% { transform: translateY(0); }
        50% { transform: translateY(-1.5px); }
      }

      .group:hover .cart-body {
        animation: jiggle 0.4s ease-in-out;
      }
      .group:hover .cart-wheel {
        transform-origin: center; 
        animation: wheel-roll 0.6s ease-out;
      }
      .group:hover .search-icon-shape {
        transform-origin: center;
        animation: search-tilt 0.4s ease-in-out;
      }
      .group:hover .user-head {
        animation: user-bob 0.4s ease-in-out;
      }
      
      /* A smoother, more fluid transition for the navigation indicator */
      .transition-springy {
        transition-property: all;
        transition-duration: 300ms;
        transition-timing-function: cubic-bezier(0.23, 1, 0.32, 1);
      }
      
      /* Typing cursor animation */
      @keyframes blink {
        50% {
          opacity: 0;
        }
      }
      .cursor-blink {
        animation: blink 1s step-start infinite;
      }
    </style>
  <script type="importmap">
{
  "imports": {
    "react-dom/client": "https://aistudiocdn.com/react-dom@^19.2.0/client",
    "react": "https://aistudiocdn.com/react@^19.2.0",
    "react-dom/": "https://aistudiocdn.com/react-dom@^19.2.0/",
    "react/": "https://aistudiocdn.com/react@^19.2.0/"
  }
}
</script>
</head>
  <body>
    <div id="root"></div>
    <script type="module">
      import React from 'react';
      import ReactDOM from 'react-dom/client';

      const { useState, useEffect, useRef } = React;

      // --- Loader Component ---

      const Loader = ({ isLoading }) => {
        if (!isLoading) return null;

        const brandName = "Optispar";
        const LETTER_ANIMATION_DURATION = 1000;
        const STAGGER_DELAY = 150;
        const HOLD_DURATION = 800;
        
        const letters = brandName.split('');
        const totalAnimationTime = (letters.length * STAGGER_DELAY) + LETTER_ANIMATION_DURATION + HOLD_DURATION;
        const fadeOutDelay = (totalAnimationTime - 500) / 1000;

        return React.createElement(
          'div',
          {
            style: { animation: `fade-out 0.5s ${fadeOutDelay}s forwards` },
            className: "fixed inset-0 z-[9999] flex items-center justify-center bg-white select-none",
            'aria-live': "polite",
            'aria-label': "Lade Optispar"
          },
          React.createElement(
            'div',
            {
              className: "flex",
              style: {
                animationName: 'subtle-glow',
                animationDuration: '2s',
                animationDelay: `${(letters.length * STAGGER_DELAY)}ms`,
                animationIterationCount: 'infinite',
                animationTimingFunction: 'ease-in-out'
              }
            },
            letters.map((letter, index) => React.createElement(
              'h1',
              {
                key: `${letter}-${index}`,
                style: {
                  animationName: 'form-from-stardust',
                  animationDuration: `${LETTER_ANIMATION_DURATION}ms`,
                  animationDelay: `${index * STAGGER_DELAY}ms`,
                  animationFillMode: 'forwards',
                  animationTimingFunction: 'cubic-bezier(0.16, 1, 0.3, 1)'
                },
                className: "text-6xl sm:text-7xl md:text-8xl font-extrabold bg-clip-text text-transparent bg-gradient-to-r from-purple-400 via-pink-500 to-orange-500 opacity-0"
              },
              letter
            ))
          )
        );
      };


      // --- ImageWithText Component ---

      const HeroVariant = ({ isLoading }) => {
          const TYPE_SPEED = 120;
          const DELETE_SPEED = 70;
          const DELAY = 2000;
          const subtitles = ["Trendige Gadgets", "Smarte Lösungen", "Innovative Technik"];
          
          const [text, setText] = useState('');
          const [subtitleIndex, setSubtitleIndex] = useState(0);
          const [isDeleting, setIsDeleting] = useState(false);
          const [canStartTyping, setCanStartTyping] = useState(false);

          useEffect(() => {
            if (!isLoading) {
              const timer = setTimeout(() => setCanStartTyping(true), 800);
              return () => clearTimeout(timer);
            }
          }, [isLoading]);

          useEffect(() => {
            if (!canStartTyping) return;
            const handleTyping = () => {
                const currentSubtitle = subtitles[subtitleIndex];
                if (isDeleting) {
                    if (text.length > 0) {
                        setText(currentSubtitle.substring(0, text.length - 1));
                    } else {
                        setIsDeleting(false);
                        setSubtitleIndex((prev) => (prev + 1) % subtitles.length);
                    }
                } else {
                    if (text.length < currentSubtitle.length) {
                        setText(currentSubtitle.substring(0, text.length + 1));
                    } else {
                        setTimeout(() => setIsDeleting(true), DELAY);
                    }
                }
            };
            const typingSpeed = isDeleting ? DELETE_SPEED : TYPE_SPEED;
            const timer = setTimeout(handleTyping, typingSpeed);
            return () => clearTimeout(timer);
          }, [text, isDeleting, subtitleIndex, canStartTyping]);

          const animationProps = (delay) => (!isLoading) ? {
            style: {
              opacity: 0,
              animation: `fade-in-up-scale 0.6s cubic-bezier(0.23, 1, 0.32, 1) forwards`,
              animationDelay: delay,
            }
          } : { style: { opacity: 0 }};

          const brandAnimationProps = () => !isLoading ? {
            style: {
              opacity: 0,
              animation: `settle-in-place 1.2s cubic-bezier(0.23, 1, 0.32, 1) forwards`,
              animationDelay: '0.2s',
            }
          } : { style: { opacity: 0 }};

          return React.createElement('section', { className: "relative bg-white text-gray-900 overflow-hidden" },
            React.createElement('div', { className: "relative z-20 min-h-screen flex flex-col items-center justify-center text-center px-4 sm:px-6 lg:px-8" },
              React.createElement('h1', { className: "text-4xl sm:text-5xl md:text-6xl font-bold tracking-tight text-gray-800", ...animationProps('0s') }, "Willkommen bei"),
              React.createElement('h2', { className: "text-6xl sm:text-7xl md:text-8xl font-extrabold my-3 bg-clip-text text-transparent bg-gradient-to-r from-fuchsia-500 via-purple-600 to-pink-500 [text-shadow:0_0_15px_rgba(228,95,188,0.4)]", ...brandAnimationProps() }, "Optispar"),
              React.createElement('div', { className: "h-10", ...animationProps('0.5s') },
                React.createElement('p', { className: "text-2xl sm:text-3xl font-light text-gray-600" },
                  React.createElement('span', null, text),
                  React.createElement('span', { className: "cursor-blink font-light" }, "|")
                )
              ),
              React.createElement('p', { className: "mt-6 max-w-2xl text-lg text-gray-500 leading-relaxed", ...animationProps('0.7s') }, "Ihr zuverlässiger Partner für sorgfältig ausgewählte Produkte, die Ihren Alltag erleichtern und bereichern."),
              React.createElement('div', { className: "mt-8 flex justify-center", ...animationProps('0.9s') },
                React.createElement('a', { href: "#", className: "inline-block bg-gradient-to-r from-purple-600 via-pink-600 to-orange-500 bg-[length:200%_auto] text-white font-semibold py-3 px-10 rounded-full shadow-lg transform transition-all duration-500 ease-in-out hover:scale-105 hover:bg-right hover:shadow-2xl hover:shadow-purple-500/50 hover:brightness-110" }, "Jetzt Einkaufen")
              )
            )
          );
      }

      // --- App Component ---

      const App = () => {
        const [isLoading, setIsLoading] = useState(true);

        useEffect(() => {
          const timer = setTimeout(() => {
            setIsLoading(false);
          }, 3000);
          return () => clearTimeout(timer);
        }, []);

        return React.createElement(
          'div',
          { className: "bg-white text-gray-900 font-sans" },
          React.createElement(Loader, { isLoading }),
          React.createElement(
            'div',
            { style: { opacity: isLoading ? 0 : 1, transition: 'opacity 0.5s ease-in' } },
            React.createElement(
              'main',
              null,
              React.createElement(HeroVariant, { isLoading })
            )
          )
        );
      };


      // --- Entry Point ---
      
      const rootElement = document.getElementById('root');
      if (!rootElement) {
        throw new Error("Could not find root element to mount to");
      }

      const root = ReactDOM.createRoot(rootElement);
      root.render(
        React.createElement(React.StrictMode, null, React.createElement(App))
      );
    </script>
  </body>
</html>