<!DOCTYPE html>
<html lang="de">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Optispar E-Commerce Page</title>
    <script src="https://cdn.tailwindcss.com"></script>

    <style>
      /* --- Loader Animations (dein Stil) --- */
      @keyframes form-from-stardust {
        0% { opacity: 0; transform: scale(1.5) translateY(-20px); filter: blur(10px) brightness(2); }
        50% { opacity: 0.8; filter: blur(2px) brightness(1.5); }
        100% { opacity: 1; transform: scale(1) translateY(0); filter: blur(0) brightness(1); }
      }
      @keyframes subtle-glow {
        0%, 100% { text-shadow: 0 0 8px rgba(255, 255, 255, 0.2), 0 0 20px rgba(192, 132, 252, 0.3); }
        50% { text-shadow: 0 0 12px rgba(255, 255, 255, 0.3), 0 0 30px rgba(192, 132, 252, 0.5); }
      }
      @keyframes fade-out { from { opacity: 1; } to { opacity: 0; } }

      /* --- Hero Reveal --- */
      @keyframes fade-in-up-scale {
        0% { opacity: 0; transform: translateY(20px) scale(0.9); }
        100% { opacity: 1; transform: translateY(0) scale(1); }
      }
      @keyframes settle-in-place {
        0% { opacity: 0; transform: translateY(-30px) scale(1.15); filter: blur(8px); }
        100% { opacity: 1; transform: translateY(0) scale(1); filter: blur(0); }
      }

      /* Cursor */
      @keyframes blink { 50% { opacity: 0; } }
      .cursor-blink { animation: blink 1s step-start infinite; }

      /* --- Nur „Optispar“ animiert (Hintergrund bleibt weiß) --- */
      .gradient-text {
        background: linear-gradient(90deg, #00E08F, #0EA5E9, #7C3AED, #0EA5E9);
        -webkit-background-clip: text; background-clip: text; color: transparent;
        background-size: 300% 100%;
        animation: gradient-move 6s ease-in-out infinite;
      }
      @keyframes gradient-move {
        0% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
        100% { background-position: 0% 50%; }
      }
      .brand-motion {
        display: inline-block;
        will-change: transform;
        animation: brand-drift 7.5s ease-in-out infinite;
      }
      @keyframes brand-drift {
        0%   { transform: translateY(0) translateX(0) scale(1); }
        20%  { transform: translateY(-2px) translateX(1px) scale(1.005); }
        40%  { transform: translateY(1px) translateX(2px) scale(1.01); }
        60%  { transform: translateY(-1px) translateX(-1px) scale(1.007); }
        80%  { transform: translateY(2px) translateX(-2px) scale(1.003); }
        100% { transform: translateY(0) translateX(0) scale(1); }
      }

      /* Bewegungen reduzieren */
      @media (prefers-reduced-motion: reduce) {
        .gradient-text, .brand-motion { animation: none !important; }
      }
    </style>

    <!-- React via Import Map -->
    <script type="importmap">
    {
      "imports": {
        "react-dom/client": "https://aistudiocdn.com/react-dom@^19.2.0/client",
        "react": "https://aistudiocdn.com/react@^19.2.0",
        "react-dom/": "https://aistudiocdn.com/react-dom@^19.2.0/",
        "react/": "https://aistudiocdn.com/react@^19.2.0/"
      }
    }
    </script>
  </head>

  <body class="bg-white text-gray-900">
    <div id="root"></div>

    {% raw %}
    <script type="module">
      import React from 'react';
      import ReactDOM from 'react-dom/client';
      const { useState, useEffect } = React;

      // ===== Loader =====
      const Loader = ({ isLoading }) => {
        if (!isLoading) return null;

        const brandName = "Optispar";
        const LETTER_ANIMATION_DURATION = 1000; // ms
        const STAGGER_DELAY = 150;              // ms
        const HOLD_DURATION = 800;              // ms

        const letters = brandName.split('');
        const totalAnimationTime =
          (letters.length * STAGGER_DELAY) + LETTER_ANIMATION_DURATION + HOLD_DURATION;
        const fadeOutDelay = (totalAnimationTime - 500) / 1000; // seconds

        return React.createElement(
          'div',
          {
            style: { animation: 'fade-out 0.5s ' + fadeOutDelay + 's forwards' },
            className: "fixed inset-0 z-[9999] flex items-center justify-center bg-white select-none",
            'aria-live': "polite",
            'aria-label': "Lade Optispar"
          },
          React.createElement(
            'div',
            {
              className: "flex",
              style: {
                animationName: 'subtle-glow',
                animationDuration: '2s',
                animationDelay: String(letters.length * STAGGER_DELAY) + 'ms',
                animationIterationCount: 'infinite',
                animationTimingFunction: 'ease-in-out'
              }
            },
            letters.map((letter, index) =>
              React.createElement(
                'h1',
                {
                  key: letter + '-' + index,
                  style: {
                    animationName: 'form-from-stardust',
                    animationDuration: String(LETTER_ANIMATION_DURATION) + 'ms',
                    animationDelay: String(index * STAGGER_DELAY) + 'ms',
                    animationFillMode: 'forwards',
                    animationTimingFunction: 'cubic-bezier(0.16, 1, 0.3, 1)'
                  },
                  className: "text-6xl sm:text-7xl md:text-8xl font-extrabold bg-clip-text text-transparent bg-gradient-to-r from-purple-400 via-pink-500 to-orange-500 opacity-0"
                },
                letter
              )
            )
          )
        );
      };

      // ===== Hero =====
      const HeroVariant = ({ isLoading }) => {
        const TYPE_SPEED = 120, DELETE_SPEED = 70, DELAY = 2000;
        const subtitles = ["Trendige Gadgets", "Smarte Lösungen", "Innovative Technik"];

        const [text, setText] = useState('');
        const [subtitleIndex, setSubtitleIndex] = useState(0);
        const [isDeleting, setIsDeleting] = useState(false);
        const [canStartTyping, setCanStartTyping] = useState(false);

        useEffect(() => {
          if (!isLoading) {
            const timer = setTimeout(() => setCanStartTyping(true), 800);
            return () => clearTimeout(timer);
          }
        }, [isLoading]);

        useEffect(() => {
          if (!canStartTyping) return;
          const handleTyping = () => {
            const current = subtitles[subtitleIndex];
            if (isDeleting) {
              if (text.length > 0) {
                setText(current.substring(0, text.length - 1));
              } else {
                setIsDeleting(false);
                setSubtitleIndex((prev) => (prev + 1) % subtitles.length);
              }
            } else {
              if (text.length < current.length) {
                setText(current.substring(0, text.length + 1));
              } else {
                setTimeout(() => setIsDeleting(true), DELAY);
              }
            }
          };
          const speed = isDeleting ? DELETE_SPEED : TYPE_SPEED;
          const timer = setTimeout(handleTyping, speed);
          return () => clearTimeout(timer);
        }, [text, isDeleting, subtitleIndex, canStartTyping]);

        const animationProps = (delay) =>
          !isLoading
            ? { style: { opacity: 0, animation: 'fade-in-up-scale 0.6s cubic-bezier(0.23, 1, 0.32, 1) forwards', animationDelay: delay } }
            : { style: { opacity: 0 } };

        const brandAnimationProps = () =>
          !isLoading
            ? { style: { opacity: 0, animation: 'settle-in-place 1.2s cubic-bezier(0.23, 1, 0.32, 1) forwards', animationDelay: '0.2s' } }
            : { style: { opacity: 0 } };

        return React.createElement(
          'section',
          { className: "relative bg-white text-gray-900 overflow-hidden" },
          React.createElement(
            'div',
            { className: "relative z-20 min-h-screen flex flex-col items-center justify-center text-center px-4 sm:px-6 lg:px-8" },

            React.createElement('h1',
              Object.assign({ className: "text-4xl sm:text-5xl md:text-6xl font-bold tracking-tight text-gray-800" }, animationProps('0s')),
              "Willkommen bei"
            ),

            // Nur das Wort „Optispar“ hat den Verlauf + Drift
            React.createElement('h2',
              Object.assign({ className: "text-6xl sm:text-7xl md:text-8xl font-extrabold my-3" }, brandAnimationProps()),
              React.createElement('span', { className: "gradient-text brand-motion [text-shadow:0_0_15px_rgba(0,0,0,0.06)]" }, "Optispar")
            ),

            React.createElement('div',
              Object.assign({ className: "h-10" }, animationProps('0.5s')),
              React.createElement('p', { className: "text-2xl sm:text-3xl font-light text-gray-600" },
                React.createElement('span', null, text),
                React.createElement('span', { className: "cursor-blink font-light" }, "|")
              )
            ),

            React.createElement('p',
              Object.assign({ className: "mt-6 max-w-2xl text-lg text-gray-500 leading-relaxed" }, animationProps('0.7s')),
              "Ihr zuverlässiger Partner für sorgfältig ausgewählte Produkte, die Ihren Alltag erleichtern und bereichern."
            ),

            React.createElement('div',
              Object.assign({ className: "mt-8 flex justify-center" }, animationProps('0.9s')),
              React.createElement('a', {
                href: "#",
                className: "inline-block bg-gradient-to-r from-purple-600 via-pink-600 to-orange-500 bg-[length:200%_auto] text-white font-semibold py-3 px-10 rounded-full shadow-lg transform transition-all duration-500 ease-in-out hover:scale-105 hover:bg-right hover:shadow-2xl hover:shadow-purple-500/50 hover:brightness-110"
              }, "Jetzt Einkaufen")
            )
          )
        );
      };

      // ===== App =====
      const App = () => {
        const [isLoading, setIsLoading] = useState(true);
        useEffect(() => {
          const timer = setTimeout(() => setIsLoading(false), 3000); // Loader-Dauer (ms)
          return () => clearTimeout(timer);
        }, []);
        return React.createElement(
          'div',
          { className: "bg-white text-gray-900 font-sans" },
          React.createElement(Loader, { isLoading }),
          React.createElement(
            'div',
            { style: { opacity: isLoading ? 0 : 1, transition: 'opacity 0.5s ease-in' } },
            React.createElement('main', null, React.createElement(HeroVariant, { isLoading }))
          )
        );
      };

      // ===== Mount =====
      const rootElement = document.getElementById('root');
      if (!rootElement) { throw new Error("Could not find root element to mount to"); }
      const root = ReactDOM.createRoot(rootElement);
      root.render(React.createElement(React.StrictMode, null, React.createElement(App)));
    </script>
    {% endraw %}
  </body>
</html>
